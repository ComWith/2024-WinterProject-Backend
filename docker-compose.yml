version: '3.8'

services:
  db:
    image: mysql:5.7
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    env_file:
      - .env
    networks:
      - flask-network
    volumes:
      - mysql-data:/var/lib/mysql

  nginx:
    image: nginx:latest
    volumes:
      - /etc/letsencrypt/live:/etc/letsencrypt/live
    ports:
      - "80:80"
      - "443:443"
    networks:
      - flask-network
    depends_on:
      - flask
    entrypoint: [ "/wait-for-it.sh", "flask:5000", "--", "nginx", "-g", "daemon off;" ]

  flask:
    build:
      context: .  # 현재 디렉토리를 빌드 컨텍스트로 설정
      dockerfile: Dockerfile  # Flask 이미지용 Dockerfilex
    image: flask-app-image  # flask 이미지 이름 지정
    container_name: flask-app
    environment:
      - FLASK_DEBUG=1  # 코드 수정 시 자동 재시작 활성화
      - PYTHONUNBUFFERED=1  # print 출력 즉시 반영
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DB=${MYSQL_DATABASE}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}  # celery
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - REDIS_HOST=redis  # Redis 서비스 이름
      - REDIS_PORT=6379  # Redis 기본 포트
      - EXTERNAL_API_KEY=${EXTERNAL_API_KEY}  # API Key 환경 변수 추가
      - EXTERNAL_API_URL=${EXTERNAL_API_URL}  # API URL 환경 변수 추가
    ports:
      - "5000:5000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - flask-network
    volumes:
      - .:/app  # 로컬 파일을 컨테이너에 반영하여 코드 변경 시 자동 재시작
      - ./shared:/shared  # 동일한 디렉터리 공유
    command: >
      sh -c "echo 'Waiting for MySQL...';
             until nc -z $MYSQL_HOST 3306; do
               echo 'Waiting for MySQL...';
               sleep 1;
             done;
             echo 'MySQL is ready!';
             flask db init || echo 'Migration folder already initialized';
             flask db migrate -m 'Initial migration' || echo 'No new migrations';
             flask db upgrade || echo 'Upgrade already applied';
             flask run --host=0.0.0.0 --port=5000"

  celery_worker:
    build: .
    container_name: celery-worker
    command: celery -A app.celery_util worker --loglevel=info
    environment:
      - FLASK_DEBUG=1  # 코드 수정 시 자동 재시작 활성화
      - PYTHONUNBUFFERED=1  # print 출력 즉시 반영
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}  # .env에서 읽기
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - REDIS_HOST=redis  # Redis 서비스 이름
      - REDIS_PORT=6379  # Redis 기본 포트
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DB=${MYSQL_DATABASE}
    volumes:
      - .:/app
      - ./shared:/shared  # 동일한 디렉터리 공유
    networks:
      - flask-network
    env_file:
      - .env
    depends_on:
      - flask
      - redis

  redis:
    image: redis:alpine  # Redis 알파인 이미지 사용
    container_name: redis
    ports:
      - "6379:6379"  # Redis 기본 포트 6379
    networks:
      - flask-network

  musescore:
    build:
      context: .  # 현재 디렉토리를 빌드 컨텍스트로 설정
      dockerfile: musescore/Dockerfile  # MuseScore 이미지용 Dockerfile
    image: musescore-app-image  # musescore 이미지 이름 지정
    container_name: musescore-app
    ports:
      - "8000:8000"
    networks:
      - flask-network
    environment:
      - QT_QPA_PLATFORM=offscreen
    restart: unless-stopped


networks:
  flask-network:
    driver: bridge

volumes:
  mysql-data:
    driver: local
